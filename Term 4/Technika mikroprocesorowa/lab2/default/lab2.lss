
lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000094  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000108  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000110  00000000  00000000  00000123  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000aa  00000000  00000000  00000233  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000122  00000000  00000000  000002dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000400  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000e7  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000028  00000000  00000000  00000507  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000060  00000000  00000000  0000052f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <avr/delay.h>

int main (void) { //pêtla g³ówna 
	while(1) {
	PORTC = 0xff;
  6c:	6f ef       	ldi	r22, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  6e:	44 e2       	ldi	r20, 0x24	; 36
  70:	54 ef       	ldi	r21, 0xF4	; 244
  72:	65 bb       	out	0x15, r22	; 21
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	30 e0       	ldi	r19, 0x00	; 0
		for(int i = 1; i<=9; i++) {
			PORTC = PORTC << 1;
  78:	85 b3       	in	r24, 0x15	; 21
  7a:	88 0f       	add	r24, r24
  7c:	85 bb       	out	0x15, r24	; 21
  7e:	ca 01       	movw	r24, r20
  80:	01 97       	sbiw	r24, 0x01	; 1
  82:	f1 f7       	brne	.-4      	; 0x80 <main+0x14>
#include <avr/delay.h>

int main (void) { //pêtla g³ówna 
	while(1) {
	PORTC = 0xff;
		for(int i = 1; i<=9; i++) {
  84:	2f 5f       	subi	r18, 0xFF	; 255
  86:	3f 4f       	sbci	r19, 0xFF	; 255
  88:	2a 30       	cpi	r18, 0x0A	; 10
  8a:	31 05       	cpc	r19, r1
  8c:	a9 f7       	brne	.-22     	; 0x78 <main+0xc>
  8e:	f1 cf       	rjmp	.-30     	; 0x72 <main+0x6>

00000090 <_exit>:
  90:	f8 94       	cli

00000092 <__stop_program>:
  92:	ff cf       	rjmp	.-2      	; 0x92 <__stop_program>
