
lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000076  00000000  00000000  00000139  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000041  00000000  00000000  000001af  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000b3  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000a4  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <avr/delay.h>

int main (void) { //pêtla g³ówna
	DDRA = 255;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0xf0;
  70:	80 ef       	ldi	r24, 0xF0	; 240
  72:	81 bb       	out	0x11, r24	; 17
	PORTA = 0b10101010;
  74:	8a ea       	ldi	r24, 0xAA	; 170
  76:	8b bb       	out	0x1b, r24	; 27
	PORTD = 0b00001111;
  78:	8f e0       	ldi	r24, 0x0F	; 15
  7a:	82 bb       	out	0x12, r24	; 18

	while(1) {
		if(bit_is_clear(PIND, 0)) {
  7c:	80 99       	sbic	0x10, 0	; 16
  7e:	03 c0       	rjmp	.+6      	; 0x86 <main+0x1a>
			PORTA = ~PORTA;
  80:	8b b3       	in	r24, 0x1b	; 27
  82:	80 95       	com	r24
  84:	8b bb       	out	0x1b, r24	; 27
		}
		if(bit_is_clear(PIND, 1)) {
  86:	81 99       	sbic	0x10, 1	; 16
  88:	03 c0       	rjmp	.+6      	; 0x90 <main+0x24>
			PORTA = ~PORTA;
  8a:	8b b3       	in	r24, 0x1b	; 27
  8c:	80 95       	com	r24
  8e:	8b bb       	out	0x1b, r24	; 27
		}
		if(bit_is_clear(PIND, 2)) {
  90:	82 99       	sbic	0x10, 2	; 16
  92:	03 c0       	rjmp	.+6      	; 0x9a <main+0x2e>
			PORTA = ~PORTA;
  94:	8b b3       	in	r24, 0x1b	; 27
  96:	80 95       	com	r24
  98:	8b bb       	out	0x1b, r24	; 27
		}
		if(bit_is_clear(PIND, 3)) {
  9a:	83 99       	sbic	0x10, 3	; 16
  9c:	ef cf       	rjmp	.-34     	; 0x7c <main+0x10>
			PORTA = ~PORTA;
  9e:	8b b3       	in	r24, 0x1b	; 27
  a0:	80 95       	com	r24
  a2:	8b bb       	out	0x1b, r24	; 27
  a4:	eb cf       	rjmp	.-42     	; 0x7c <main+0x10>

000000a6 <_exit>:
  a6:	f8 94       	cli

000000a8 <__stop_program>:
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <__stop_program>
