
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000442  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000442  000004b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e76  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000888  00000000  00000000  00001452  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007db  00000000  00000000  00001cda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000144  00000000  00000000  000024b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000419  00000000  00000000  000025fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000054d  00000000  00000000  00002a15  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002f62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e4       	ldi	r30, 0x42	; 66
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 cb 01 	call	0x396	; 0x396 <main>
  7a:	0c 94 1f 02 	jmp	0x43e	; 0x43e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <showLED>:

#define PORTLED PORTA
#define DDRLED  DDRA

void showLED(int clicked){
	PORTLED = clicked;
  82:	8b bb       	out	0x1b, r24	; 27
  84:	08 95       	ret

00000086 <showLCD>:
}

void showLCD(int clicked){
  86:	0f 93       	push	r16
  88:	1f 93       	push	r17
  8a:	cf 93       	push	r28
  8c:	df 93       	push	r29
  8e:	00 d0       	rcall	.+0      	; 0x90 <showLCD+0xa>
  90:	cd b7       	in	r28, 0x3d	; 61
  92:	de b7       	in	r29, 0x3e	; 62
  94:	8c 01       	movw	r16, r24
	LCD_Clear();
  96:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_Clear>
	
	char a[2];
	
	if (clicked <= 9 && clicked >= 0)
  9a:	0a 30       	cpi	r16, 0x0A	; 10
  9c:	11 05       	cpc	r17, r1
  9e:	48 f4       	brcc	.+18     	; 0xb2 <showLCD+0x2c>
	{
		itoa(clicked, a, 10);
  a0:	4a e0       	ldi	r20, 0x0A	; 10
  a2:	50 e0       	ldi	r21, 0x00	; 0
  a4:	be 01       	movw	r22, r28
  a6:	6f 5f       	subi	r22, 0xFF	; 255
  a8:	7f 4f       	sbci	r23, 0xFF	; 255
  aa:	c8 01       	movw	r24, r16
  ac:	0e 94 df 01 	call	0x3be	; 0x3be <itoa>
  b0:	2f c0       	rjmp	.+94     	; 0x110 <showLCD+0x8a>
	} else if (clicked == 10)
  b2:	0a 30       	cpi	r16, 0x0A	; 10
  b4:	11 05       	cpc	r17, r1
  b6:	29 f4       	brne	.+10     	; 0xc2 <showLCD+0x3c>
	{
		a[0] = '*';
  b8:	8a e2       	ldi	r24, 0x2A	; 42
  ba:	89 83       	std	Y+1, r24	; 0x01
		a[1] = ' ';
  bc:	80 e2       	ldi	r24, 0x20	; 32
  be:	8a 83       	std	Y+2, r24	; 0x02
  c0:	27 c0       	rjmp	.+78     	; 0x110 <showLCD+0x8a>
	} else if (clicked == 11)
  c2:	0b 30       	cpi	r16, 0x0B	; 11
  c4:	11 05       	cpc	r17, r1
  c6:	29 f4       	brne	.+10     	; 0xd2 <showLCD+0x4c>
	{
		a[0] = '#';
  c8:	83 e2       	ldi	r24, 0x23	; 35
  ca:	89 83       	std	Y+1, r24	; 0x01
		a[1] = ' ';
  cc:	80 e2       	ldi	r24, 0x20	; 32
  ce:	8a 83       	std	Y+2, r24	; 0x02
  d0:	1f c0       	rjmp	.+62     	; 0x110 <showLCD+0x8a>
	} else if (clicked == 12)
  d2:	0c 30       	cpi	r16, 0x0C	; 12
  d4:	11 05       	cpc	r17, r1
  d6:	29 f4       	brne	.+10     	; 0xe2 <showLCD+0x5c>
	{
		a[0] = 'A';
  d8:	81 e4       	ldi	r24, 0x41	; 65
  da:	89 83       	std	Y+1, r24	; 0x01
		a[1] = ' ';
  dc:	80 e2       	ldi	r24, 0x20	; 32
  de:	8a 83       	std	Y+2, r24	; 0x02
  e0:	17 c0       	rjmp	.+46     	; 0x110 <showLCD+0x8a>
	} else if (clicked == 13)
  e2:	0d 30       	cpi	r16, 0x0D	; 13
  e4:	11 05       	cpc	r17, r1
  e6:	29 f4       	brne	.+10     	; 0xf2 <showLCD+0x6c>
	{
		a[0] = 'B';
  e8:	82 e4       	ldi	r24, 0x42	; 66
  ea:	89 83       	std	Y+1, r24	; 0x01
		a[1] = ' ';
  ec:	80 e2       	ldi	r24, 0x20	; 32
  ee:	8a 83       	std	Y+2, r24	; 0x02
  f0:	0f c0       	rjmp	.+30     	; 0x110 <showLCD+0x8a>
	} else if (clicked == 14)
  f2:	0e 30       	cpi	r16, 0x0E	; 14
  f4:	11 05       	cpc	r17, r1
  f6:	29 f4       	brne	.+10     	; 0x102 <showLCD+0x7c>
	{
		a[0] = 'C';
  f8:	83 e4       	ldi	r24, 0x43	; 67
  fa:	89 83       	std	Y+1, r24	; 0x01
		a[1] = ' ';
  fc:	80 e2       	ldi	r24, 0x20	; 32
  fe:	8a 83       	std	Y+2, r24	; 0x02
 100:	07 c0       	rjmp	.+14     	; 0x110 <showLCD+0x8a>
	} else if (clicked == 15)
 102:	0f 30       	cpi	r16, 0x0F	; 15
 104:	11 05       	cpc	r17, r1
 106:	21 f4       	brne	.+8      	; 0x110 <showLCD+0x8a>
	{
		a[0] = 'D';
 108:	84 e4       	ldi	r24, 0x44	; 68
 10a:	89 83       	std	Y+1, r24	; 0x01
		a[1] = ' ';
 10c:	80 e2       	ldi	r24, 0x20	; 32
 10e:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	LCD_WriteText("Przycisk:");
 110:	80 e6       	ldi	r24, 0x60	; 96
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_WriteText>
	LCD_WriteText(a);
 118:	ce 01       	movw	r24, r28
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_WriteText>
}
 120:	0f 90       	pop	r0
 122:	0f 90       	pop	r0
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	1f 91       	pop	r17
 12a:	0f 91       	pop	r16
 12c:	08 95       	ret

0000012e <keyboard>:

int keyboard() {
	DDRLED =0xff;
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	8a bb       	out	0x1a, r24	; 26
	DDRK   =0xf0;
 132:	80 ef       	ldi	r24, 0xF0	; 240
 134:	81 bb       	out	0x11, r24	; 17
	
	PORTK  =0b11101111; //akytwacja kolumny K1 (1 z 4)
 136:	8f ee       	ldi	r24, 0xEF	; 239
 138:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	89 ef       	ldi	r24, 0xF9	; 249
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <keyboard+0x10>
 142:	00 c0       	rjmp	.+0      	; 0x144 <keyboard+0x16>
 144:	00 00       	nop
	_delay_ms(1);		//czas na ustalenie siê stanu na linii K1
	
	if((PINK & (1<<0))==0){
 146:	80 9b       	sbis	0x10, 0	; 16
 148:	39 c0       	rjmp	.+114    	; 0x1bc <keyboard+0x8e>
		return 1;
		_delay_ms(20);
	}
	if((PINK & (1<<1))==0){
 14a:	81 9b       	sbis	0x10, 1	; 16
 14c:	3a c0       	rjmp	.+116    	; 0x1c2 <keyboard+0x94>
		return 4;
		_delay_ms(20);
	}
	if((PINK & (1<<2))==0){
 14e:	82 9b       	sbis	0x10, 2	; 16
 150:	3b c0       	rjmp	.+118    	; 0x1c8 <keyboard+0x9a>
		return 7;
		_delay_ms(20);
	}
	if((PINK & (1<<3))==0){
 152:	83 9b       	sbis	0x10, 3	; 16
 154:	3c c0       	rjmp	.+120    	; 0x1ce <keyboard+0xa0>
		return 10;
		_delay_ms(20);
	}
	
	PORTK  =0b11011111; //akytwacja kolumny K2
 156:	8f ed       	ldi	r24, 0xDF	; 223
 158:	82 bb       	out	0x12, r24	; 18
 15a:	89 ef       	ldi	r24, 0xF9	; 249
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <keyboard+0x30>
 162:	00 c0       	rjmp	.+0      	; 0x164 <keyboard+0x36>
 164:	00 00       	nop
	_delay_ms(1);		//czas na ustalenie siê stanu na linii K2
	
	if((PINK & (1<<0))==0){
 166:	80 9b       	sbis	0x10, 0	; 16
 168:	35 c0       	rjmp	.+106    	; 0x1d4 <keyboard+0xa6>
		return 2;
		_delay_ms(20);
	}
	if((PINK & (1<<1))==0){
 16a:	81 9b       	sbis	0x10, 1	; 16
 16c:	36 c0       	rjmp	.+108    	; 0x1da <keyboard+0xac>
		return 5;
		_delay_ms(20);
	}
	if((PINK & (1<<2))==0){
 16e:	82 9b       	sbis	0x10, 2	; 16
 170:	37 c0       	rjmp	.+110    	; 0x1e0 <keyboard+0xb2>
		return 8;
		_delay_ms(20);
	}
	if((PINK & (1<<3))==0){
 172:	83 9b       	sbis	0x10, 3	; 16
 174:	38 c0       	rjmp	.+112    	; 0x1e6 <keyboard+0xb8>
		return 0;
		_delay_ms(20);
	}
	
	PORTK  =0b10111111; //akytwacja kolumny K3
 176:	8f eb       	ldi	r24, 0xBF	; 191
 178:	82 bb       	out	0x12, r24	; 18
 17a:	89 ef       	ldi	r24, 0xF9	; 249
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <keyboard+0x50>
 182:	00 c0       	rjmp	.+0      	; 0x184 <keyboard+0x56>
 184:	00 00       	nop
	_delay_ms(1);		//czas na ustalenie siê stanu na linii K3
	
	if((PINK & (1<<0))==0){
 186:	80 9b       	sbis	0x10, 0	; 16
 188:	31 c0       	rjmp	.+98     	; 0x1ec <keyboard+0xbe>
		return 3;
		_delay_ms(20);
	}
	if((PINK & (1<<1))==0){
 18a:	81 9b       	sbis	0x10, 1	; 16
 18c:	32 c0       	rjmp	.+100    	; 0x1f2 <keyboard+0xc4>
		return 6;
		_delay_ms(20);
	}
	if((PINK & (1<<2))==0){
 18e:	82 9b       	sbis	0x10, 2	; 16
 190:	33 c0       	rjmp	.+102    	; 0x1f8 <keyboard+0xca>
		return 9;
		_delay_ms(20);
	}
	if((PINK & (1<<3))==0){
 192:	83 9b       	sbis	0x10, 3	; 16
 194:	34 c0       	rjmp	.+104    	; 0x1fe <keyboard+0xd0>
		return 11;
		_delay_ms(20);
	}
	
	PORTK  =0b01111111; //akytwacja kolumny K4
 196:	8f e7       	ldi	r24, 0x7F	; 127
 198:	82 bb       	out	0x12, r24	; 18
 19a:	89 ef       	ldi	r24, 0xF9	; 249
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <keyboard+0x70>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <keyboard+0x76>
 1a4:	00 00       	nop
	_delay_ms(1);		//czas na ustalenie siê stanu na linii K4
	
	if((PINK & (1<<0))==0){
 1a6:	80 9b       	sbis	0x10, 0	; 16
 1a8:	2d c0       	rjmp	.+90     	; 0x204 <keyboard+0xd6>
		return 12;
		_delay_ms(20);
	}
	if((PINK & (1<<1))==0){
 1aa:	81 9b       	sbis	0x10, 1	; 16
 1ac:	2e c0       	rjmp	.+92     	; 0x20a <keyboard+0xdc>
		return 13;
		_delay_ms(20);
	}
	if((PINK & (1<<2))==0){
 1ae:	82 9b       	sbis	0x10, 2	; 16
 1b0:	2f c0       	rjmp	.+94     	; 0x210 <keyboard+0xe2>
		return 14;
		_delay_ms(20);
	}
	if((PINK & (1<<3))==0){
 1b2:	83 99       	sbic	0x10, 3	; 16
 1b4:	30 c0       	rjmp	.+96     	; 0x216 <keyboard+0xe8>
		return 15;
 1b6:	8f e0       	ldi	r24, 0x0F	; 15
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	08 95       	ret
	
	PORTK  =0b11101111; //akytwacja kolumny K1 (1 z 4)
	_delay_ms(1);		//czas na ustalenie siê stanu na linii K1
	
	if((PINK & (1<<0))==0){
		return 1;
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	08 95       	ret
		_delay_ms(20);
	}
	if((PINK & (1<<1))==0){
		return 4;
 1c2:	84 e0       	ldi	r24, 0x04	; 4
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	08 95       	ret
		_delay_ms(20);
	}
	if((PINK & (1<<2))==0){
		return 7;
 1c8:	87 e0       	ldi	r24, 0x07	; 7
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	08 95       	ret
		_delay_ms(20);
	}
	if((PINK & (1<<3))==0){
		return 10;
 1ce:	8a e0       	ldi	r24, 0x0A	; 10
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	08 95       	ret
	
	PORTK  =0b11011111; //akytwacja kolumny K2
	_delay_ms(1);		//czas na ustalenie siê stanu na linii K2
	
	if((PINK & (1<<0))==0){
		return 2;
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	08 95       	ret
		_delay_ms(20);
	}
	if((PINK & (1<<1))==0){
		return 5;
 1da:	85 e0       	ldi	r24, 0x05	; 5
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	08 95       	ret
		_delay_ms(20);
	}
	if((PINK & (1<<2))==0){
		return 8;
 1e0:	88 e0       	ldi	r24, 0x08	; 8
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	08 95       	ret
		_delay_ms(20);
	}
	if((PINK & (1<<3))==0){
		return 0;
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	08 95       	ret
	
	PORTK  =0b10111111; //akytwacja kolumny K3
	_delay_ms(1);		//czas na ustalenie siê stanu na linii K3
	
	if((PINK & (1<<0))==0){
		return 3;
 1ec:	83 e0       	ldi	r24, 0x03	; 3
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	08 95       	ret
		_delay_ms(20);
	}
	if((PINK & (1<<1))==0){
		return 6;
 1f2:	86 e0       	ldi	r24, 0x06	; 6
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	08 95       	ret
		_delay_ms(20);
	}
	if((PINK & (1<<2))==0){
		return 9;
 1f8:	89 e0       	ldi	r24, 0x09	; 9
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	08 95       	ret
		_delay_ms(20);
	}
	if((PINK & (1<<3))==0){
		return 11;
 1fe:	8b e0       	ldi	r24, 0x0B	; 11
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	08 95       	ret
	
	PORTK  =0b01111111; //akytwacja kolumny K4
	_delay_ms(1);		//czas na ustalenie siê stanu na linii K4
	
	if((PINK & (1<<0))==0){
		return 12;
 204:	8c e0       	ldi	r24, 0x0C	; 12
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	08 95       	ret
		_delay_ms(20);
	}
	if((PINK & (1<<1))==0){
		return 13;
 20a:	8d e0       	ldi	r24, 0x0D	; 13
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	08 95       	ret
		_delay_ms(20);
	}
	if((PINK & (1<<2))==0){
		return 14;
 210:	8e e0       	ldi	r24, 0x0E	; 14
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	08 95       	ret
	}
	if((PINK & (1<<3))==0){
		return 15;
		_delay_ms(20);
	}
	return -1;
 216:	8f ef       	ldi	r24, 0xFF	; 255
 218:	9f ef       	ldi	r25, 0xFF	; 255
 21a:	08 95       	ret

0000021c <_LCD_OutNibble>:
 21c:	80 ff       	sbrs	r24, 0
 21e:	04 c0       	rjmp	.+8      	; 0x228 <_LCD_OutNibble+0xc>
 220:	98 b3       	in	r25, 0x18	; 24
 222:	90 61       	ori	r25, 0x10	; 16
 224:	98 bb       	out	0x18, r25	; 24
 226:	03 c0       	rjmp	.+6      	; 0x22e <_LCD_OutNibble+0x12>
 228:	98 b3       	in	r25, 0x18	; 24
 22a:	9f 7e       	andi	r25, 0xEF	; 239
 22c:	98 bb       	out	0x18, r25	; 24
 22e:	81 ff       	sbrs	r24, 1
 230:	04 c0       	rjmp	.+8      	; 0x23a <_LCD_OutNibble+0x1e>
 232:	98 b3       	in	r25, 0x18	; 24
 234:	90 62       	ori	r25, 0x20	; 32
 236:	98 bb       	out	0x18, r25	; 24
 238:	03 c0       	rjmp	.+6      	; 0x240 <_LCD_OutNibble+0x24>
 23a:	98 b3       	in	r25, 0x18	; 24
 23c:	9f 7d       	andi	r25, 0xDF	; 223
 23e:	98 bb       	out	0x18, r25	; 24
 240:	82 ff       	sbrs	r24, 2
 242:	04 c0       	rjmp	.+8      	; 0x24c <_LCD_OutNibble+0x30>
 244:	98 b3       	in	r25, 0x18	; 24
 246:	90 64       	ori	r25, 0x40	; 64
 248:	98 bb       	out	0x18, r25	; 24
 24a:	03 c0       	rjmp	.+6      	; 0x252 <_LCD_OutNibble+0x36>
 24c:	98 b3       	in	r25, 0x18	; 24
 24e:	9f 7b       	andi	r25, 0xBF	; 191
 250:	98 bb       	out	0x18, r25	; 24
 252:	83 ff       	sbrs	r24, 3
 254:	04 c0       	rjmp	.+8      	; 0x25e <_LCD_OutNibble+0x42>
 256:	88 b3       	in	r24, 0x18	; 24
 258:	80 68       	ori	r24, 0x80	; 128
 25a:	88 bb       	out	0x18, r24	; 24
 25c:	08 95       	ret
 25e:	88 b3       	in	r24, 0x18	; 24
 260:	8f 77       	andi	r24, 0x7F	; 127
 262:	88 bb       	out	0x18, r24	; 24
 264:	08 95       	ret

00000266 <_LCD_Write>:
 266:	cf 93       	push	r28
 268:	c8 2f       	mov	r28, r24
 26a:	88 b3       	in	r24, 0x18	; 24
 26c:	81 60       	ori	r24, 0x01	; 1
 26e:	88 bb       	out	0x18, r24	; 24
 270:	8c 2f       	mov	r24, r28
 272:	82 95       	swap	r24
 274:	8f 70       	andi	r24, 0x0F	; 15
 276:	0e 94 0e 01 	call	0x21c	; 0x21c <_LCD_OutNibble>
 27a:	88 b3       	in	r24, 0x18	; 24
 27c:	8e 7f       	andi	r24, 0xFE	; 254
 27e:	88 bb       	out	0x18, r24	; 24
 280:	88 b3       	in	r24, 0x18	; 24
 282:	81 60       	ori	r24, 0x01	; 1
 284:	88 bb       	out	0x18, r24	; 24
 286:	8c 2f       	mov	r24, r28
 288:	0e 94 0e 01 	call	0x21c	; 0x21c <_LCD_OutNibble>
 28c:	88 b3       	in	r24, 0x18	; 24
 28e:	8e 7f       	andi	r24, 0xFE	; 254
 290:	88 bb       	out	0x18, r24	; 24
 292:	80 e1       	ldi	r24, 0x10	; 16
 294:	8a 95       	dec	r24
 296:	f1 f7       	brne	.-4      	; 0x294 <_LCD_Write+0x2e>
 298:	00 c0       	rjmp	.+0      	; 0x29a <_LCD_Write+0x34>
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <LCD_WriteCommand>:
 29e:	98 b3       	in	r25, 0x18	; 24
 2a0:	97 7f       	andi	r25, 0xF7	; 247
 2a2:	98 bb       	out	0x18, r25	; 24
 2a4:	0e 94 33 01 	call	0x266	; 0x266 <_LCD_Write>
 2a8:	08 95       	ret

000002aa <LCD_WriteData>:
 2aa:	98 b3       	in	r25, 0x18	; 24
 2ac:	98 60       	ori	r25, 0x08	; 8
 2ae:	98 bb       	out	0x18, r25	; 24
 2b0:	0e 94 33 01 	call	0x266	; 0x266 <_LCD_Write>
 2b4:	08 95       	ret

000002b6 <LCD_WriteText>:
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	ec 01       	movw	r28, r24
 2bc:	03 c0       	rjmp	.+6      	; 0x2c4 <LCD_WriteText+0xe>
 2be:	21 96       	adiw	r28, 0x01	; 1
 2c0:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_WriteData>
 2c4:	88 81       	ld	r24, Y
 2c6:	81 11       	cpse	r24, r1
 2c8:	fa cf       	rjmp	.-12     	; 0x2be <LCD_WriteText+0x8>
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	08 95       	ret

000002d0 <LCD_Clear>:
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_WriteCommand>
 2d6:	83 ef       	ldi	r24, 0xF3	; 243
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <LCD_Clear+0xa>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <LCD_Clear+0x10>
 2e0:	00 00       	nop
 2e2:	08 95       	ret

000002e4 <LCD_Initalize>:
//
// Procedura inicjalizacji kontrolera HD44780.
//
//-------------------------------------------------------------------------------------------------
void LCD_Initalize(void)
{
 2e4:	cf 93       	push	r28
unsigned char i;
LCD_DB4_DIR |= LCD_DB4; // Konfiguracja kierunku pracy wyprowadzeñ
 2e6:	87 b3       	in	r24, 0x17	; 23
 2e8:	80 61       	ori	r24, 0x10	; 16
 2ea:	87 bb       	out	0x17, r24	; 23
LCD_DB5_DIR |= LCD_DB5; //
 2ec:	87 b3       	in	r24, 0x17	; 23
 2ee:	80 62       	ori	r24, 0x20	; 32
 2f0:	87 bb       	out	0x17, r24	; 23
LCD_DB6_DIR |= LCD_DB6; //
 2f2:	87 b3       	in	r24, 0x17	; 23
 2f4:	80 64       	ori	r24, 0x40	; 64
 2f6:	87 bb       	out	0x17, r24	; 23
LCD_DB7_DIR |= LCD_DB7; //
 2f8:	87 b3       	in	r24, 0x17	; 23
 2fa:	80 68       	ori	r24, 0x80	; 128
 2fc:	87 bb       	out	0x17, r24	; 23
LCD_E_DIR 	|= LCD_E;   //
 2fe:	87 b3       	in	r24, 0x17	; 23
 300:	81 60       	ori	r24, 0x01	; 1
 302:	87 bb       	out	0x17, r24	; 23
LCD_RS_DIR 	|= LCD_RS;  //
 304:	87 b3       	in	r24, 0x17	; 23
 306:	88 60       	ori	r24, 0x08	; 8
 308:	87 bb       	out	0x17, r24	; 23
 30a:	85 ea       	ldi	r24, 0xA5	; 165
 30c:	9e e0       	ldi	r25, 0x0E	; 14
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <LCD_Initalize+0x2a>
 312:	00 c0       	rjmp	.+0      	; 0x314 <LCD_Initalize+0x30>
 314:	00 00       	nop
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
 316:	88 b3       	in	r24, 0x18	; 24
 318:	87 7f       	andi	r24, 0xF7	; 247
 31a:	88 bb       	out	0x18, r24	; 24
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E
 31c:	88 b3       	in	r24, 0x18	; 24
 31e:	8e 7f       	andi	r24, 0xFE	; 254
 320:	88 bb       	out	0x18, r24	; 24

for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
 322:	c0 e0       	ldi	r28, 0x00	; 0
 324:	10 c0       	rjmp	.+32     	; 0x346 <LCD_Initalize+0x62>
  {
  LCD_E_PORT |= LCD_E; //  E = 1
 326:	88 b3       	in	r24, 0x18	; 24
 328:	81 60       	ori	r24, 0x01	; 1
 32a:	88 bb       	out	0x18, r24	; 24
  _LCD_OutNibble(0x03); // tryb 8-bitowy
 32c:	83 e0       	ldi	r24, 0x03	; 3
 32e:	0e 94 0e 01 	call	0x21c	; 0x21c <_LCD_OutNibble>
  LCD_E_PORT &= ~LCD_E; // E = 0
 332:	88 b3       	in	r24, 0x18	; 24
 334:	8e 7f       	andi	r24, 0xFE	; 254
 336:	88 bb       	out	0x18, r24	; 24
 338:	81 ee       	ldi	r24, 0xE1	; 225
 33a:	94 e0       	ldi	r25, 0x04	; 4
 33c:	01 97       	sbiw	r24, 0x01	; 1
 33e:	f1 f7       	brne	.-4      	; 0x33c <LCD_Initalize+0x58>
 340:	00 c0       	rjmp	.+0      	; 0x342 <LCD_Initalize+0x5e>
 342:	00 00       	nop
LCD_RS_DIR 	|= LCD_RS;  //
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E

for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
 344:	cf 5f       	subi	r28, 0xFF	; 255
 346:	c3 30       	cpi	r28, 0x03	; 3
 348:	70 f3       	brcs	.-36     	; 0x326 <LCD_Initalize+0x42>
  _LCD_OutNibble(0x03); // tryb 8-bitowy
  LCD_E_PORT &= ~LCD_E; // E = 0
  _delay_ms(5); // czekaj 5ms
  }

LCD_E_PORT |= LCD_E; // E = 1
 34a:	88 b3       	in	r24, 0x18	; 24
 34c:	81 60       	ori	r24, 0x01	; 1
 34e:	88 bb       	out	0x18, r24	; 24
_LCD_OutNibble(0x02); // tryb 4-bitowy
 350:	82 e0       	ldi	r24, 0x02	; 2
 352:	0e 94 0e 01 	call	0x21c	; 0x21c <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E; // E = 0
 356:	88 b3       	in	r24, 0x18	; 24
 358:	8e 7f       	andi	r24, 0xFE	; 254
 35a:	88 bb       	out	0x18, r24	; 24
 35c:	89 ef       	ldi	r24, 0xF9	; 249
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <LCD_Initalize+0x7c>
 364:	00 c0       	rjmp	.+0      	; 0x366 <LCD_Initalize+0x82>
 366:	00 00       	nop

_delay_ms(1); // czekaj 1ms 
LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); // interfejs 4-bity, 2-linie, znak 5x7
 368:	88 e2       	ldi	r24, 0x28	; 40
 36a:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); // wy³¹czenie wyswietlacza
 36e:	88 e0       	ldi	r24, 0x08	; 8
 370:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_WriteCommand>
LCD_WriteCommand(HD44780_CLEAR); // czyszczenie zawartosæi pamieci DDRAM
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_WriteCommand>
 37a:	83 ef       	ldi	r24, 0xF3	; 243
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <LCD_Initalize+0x9a>
 382:	00 c0       	rjmp	.+0      	; 0x384 <LCD_Initalize+0xa0>
 384:	00 00       	nop
_delay_ms(2);
LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);// inkrementaja adresu i przesuwanie kursora
 386:	86 e0       	ldi	r24, 0x06	; 6
 388:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK); // w³¹cz LCD, bez kursora i mrugania
 38c:	8c e0       	ldi	r24, 0x0C	; 12
 38e:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_WriteCommand>
}
 392:	cf 91       	pop	r28
 394:	08 95       	ret

00000396 <main>:
#define PORTLED PORTA
#define DDRLED  DDRA

int main(void)
{
	DDRLED =0xff;
 396:	8f ef       	ldi	r24, 0xFF	; 255
 398:	8a bb       	out	0x1a, r24	; 26
	DDRK   =0xf0;
 39a:	80 ef       	ldi	r24, 0xF0	; 240
 39c:	81 bb       	out	0x11, r24	; 17
	
	LCD_Initalize();
 39e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_Initalize>
	
	
	while (1)
	{
		int clicked = keyboard();
 3a2:	0e 94 97 00 	call	0x12e	; 0x12e <keyboard>
 3a6:	ec 01       	movw	r28, r24
		if (clicked != -1)
 3a8:	cf 3f       	cpi	r28, 0xFF	; 255
 3aa:	8f ef       	ldi	r24, 0xFF	; 255
 3ac:	d8 07       	cpc	r29, r24
 3ae:	c9 f3       	breq	.-14     	; 0x3a2 <main+0xc>
		{
			showLED(clicked);
 3b0:	ce 01       	movw	r24, r28
 3b2:	0e 94 41 00 	call	0x82	; 0x82 <showLED>
			showLCD(clicked);
 3b6:	ce 01       	movw	r24, r28
 3b8:	0e 94 43 00 	call	0x86	; 0x86 <showLCD>
 3bc:	f2 cf       	rjmp	.-28     	; 0x3a2 <main+0xc>

000003be <itoa>:
 3be:	45 32       	cpi	r20, 0x25	; 37
 3c0:	51 05       	cpc	r21, r1
 3c2:	20 f4       	brcc	.+8      	; 0x3cc <itoa+0xe>
 3c4:	42 30       	cpi	r20, 0x02	; 2
 3c6:	10 f0       	brcs	.+4      	; 0x3cc <itoa+0xe>
 3c8:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__itoa_ncheck>
 3cc:	fb 01       	movw	r30, r22
 3ce:	10 82       	st	Z, r1
 3d0:	cb 01       	movw	r24, r22
 3d2:	08 95       	ret

000003d4 <__itoa_ncheck>:
 3d4:	bb 27       	eor	r27, r27
 3d6:	4a 30       	cpi	r20, 0x0A	; 10
 3d8:	31 f4       	brne	.+12     	; 0x3e6 <__itoa_ncheck+0x12>
 3da:	99 23       	and	r25, r25
 3dc:	22 f4       	brpl	.+8      	; 0x3e6 <__itoa_ncheck+0x12>
 3de:	bd e2       	ldi	r27, 0x2D	; 45
 3e0:	90 95       	com	r25
 3e2:	81 95       	neg	r24
 3e4:	9f 4f       	sbci	r25, 0xFF	; 255
 3e6:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__utoa_common>

000003ea <__utoa_ncheck>:
 3ea:	bb 27       	eor	r27, r27

000003ec <__utoa_common>:
 3ec:	fb 01       	movw	r30, r22
 3ee:	55 27       	eor	r21, r21
 3f0:	aa 27       	eor	r26, r26
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	aa 1f       	adc	r26, r26
 3f8:	a4 17       	cp	r26, r20
 3fa:	10 f0       	brcs	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fc:	a4 1b       	sub	r26, r20
 3fe:	83 95       	inc	r24
 400:	50 51       	subi	r21, 0x10	; 16
 402:	b9 f7       	brne	.-18     	; 0x3f2 <__utoa_common+0x6>
 404:	a0 5d       	subi	r26, 0xD0	; 208
 406:	aa 33       	cpi	r26, 0x3A	; 58
 408:	08 f0       	brcs	.+2      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 40a:	a9 5d       	subi	r26, 0xD9	; 217
 40c:	a1 93       	st	Z+, r26
 40e:	00 97       	sbiw	r24, 0x00	; 0
 410:	79 f7       	brne	.-34     	; 0x3f0 <__utoa_common+0x4>
 412:	b1 11       	cpse	r27, r1
 414:	b1 93       	st	Z+, r27
 416:	11 92       	st	Z+, r1
 418:	cb 01       	movw	r24, r22
 41a:	0c 94 0f 02 	jmp	0x41e	; 0x41e <strrev>

0000041e <strrev>:
 41e:	dc 01       	movw	r26, r24
 420:	fc 01       	movw	r30, r24
 422:	67 2f       	mov	r22, r23
 424:	71 91       	ld	r23, Z+
 426:	77 23       	and	r23, r23
 428:	e1 f7       	brne	.-8      	; 0x422 <strrev+0x4>
 42a:	32 97       	sbiw	r30, 0x02	; 2
 42c:	04 c0       	rjmp	.+8      	; 0x436 <strrev+0x18>
 42e:	7c 91       	ld	r23, X
 430:	6d 93       	st	X+, r22
 432:	70 83       	st	Z, r23
 434:	62 91       	ld	r22, -Z
 436:	ae 17       	cp	r26, r30
 438:	bf 07       	cpc	r27, r31
 43a:	c8 f3       	brcs	.-14     	; 0x42e <strrev+0x10>
 43c:	08 95       	ret

0000043e <_exit>:
 43e:	f8 94       	cli

00000440 <__stop_program>:
 440:	ff cf       	rjmp	.-2      	; 0x440 <__stop_program>
